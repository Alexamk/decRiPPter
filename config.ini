[General]
;The number of threads/cores to use
cores=3

[Folders]
;Paths to the Pfam and TIGRFAM database, respectively
;pfam_db_path=/path/to/Pfam-A.hmm
;tigrfam_db_path=/path/to/TIGRFAMs_15.0_HMM.LIB

pfam_db_path=/home/alexander/Documents/Phd/pfam/Pfam-A.hmm
tigrfam_db_path=/home/alexander/Documents/Phd/tigrfam/TIGRFAMs_15.0_HMM.LIB

;The folder containing the taxonomy files. Will be downloaded to this folder if necessary
taxonomy_folder=taxonomy


[Genome downloading]
;Which annotation to use when downloadig genomes from NCBI (genbank or refseq)
tax_file=refseq
;When downloading, indicate which assembly levels are required, and which refseq_category they should belong (false for none)
;Seperate multiple requirements with commas, without spaces. E.g. assembly_level_req=Scaffold,Complete Genome,Contig
;Similar criteria can be passed to the required refseq category. E.g. representative genome, reference genome
assembly_level_req=false
refseq_category= false

[Prodigal annotation]
;Annotation - Use prodigal 1) always; 2) never; 3) auto - Automatically decide (runs if dna fasta files are found, but no .gbk files)
run_prodigal=never
;Override previous annotation?
override_prodigal=false
;Take along pseudo genes or skip them?
pseudo=true

[Precursor detection]
;SVM cutoff
SVM_cutoff=0.90
;Small open reading frames (smORFs) are automatically found in intergenic regions, and processed if they passed the SVM cutoff
;Base name for intergenic smORFs
smorf_base_name=smORF
;Maximum overlap with adjacent gene when looking for intergenic smORFs
maximum_overlap_smorf=20


[COG preparation]
;Maximum number of proteins to be processes at once. Depends on amount of available RAM. 
;For 8GB of RAM, 200 000 max proteins should be manageable. If not, let me know so I can adjust the README
max_proteins=200000

;How to split the genomes if total number of proteins exceeds the max_proteins; Choose from random or load (more options to be added)
split_genomes=random
;If the setting below is true, only the largest group after splitting is used
largest_group_only=false

[COG BLAST]
;Skip blast. Choose from auto / true / false. auto will run blast if no results are found, otherwise uses previous results. Error if no previous results are found.
skip_blast=auto
;Choose from NCBI or Diamond
blast_type=Diamond

[COG]
;Minimum similarity for two genes to be considered bidirectional best hits
min_simil_bbh=60.0
;Always include truecogs in the final cogs (even if their similarity is below the cutoff)
propagate_truecogs=true

;The COG similarity cutoff is determined as average minus the cutoff_factor times the std of the trueCOGs of each genome pair 
cutoff_factor=3

;Draw histograms for the COG scores
COG_histograms=false

; Group requirements

;Minimum group size
cog_min_group_size=5
;Minimum amount of truecogs
cog_min_truecogs_req=10
;Minimum cutoff for any genome pair
cog_min_cutoff_req=50.0

; cog_addmethod sets how to determine which genome to add in subgroup formation. Select 'random' for fast results, and 'best' for better group results
cog_addmethod=random

; When selecting genomes randomly, it's possible not all ideal groups are found. To improve this, you can set a minimum number of iterations here
; When all genomes are assigned to groups before the minimum number of iterations are passed, the genome with the smallest groups will be resubmitted
; to try and find a better group for it
cog_bottomsup_miniter = 3

; If the following variables are set, stop looking for better COG groups if no improvement is found
; after the given amount of time (minutes) or genomes set as seeds
cog_stop_split_iterations=5
cog_stop_split_time=false

[antismash]
;Requires that antiSMASH is run on the genomes; the antismash_wrapper script can be used for this purpose
antismash_parse=true


;When a gene cluster has partial overlap, only consider it overlapping when it covers at least this fraction of the operon
antismash_minimal_overlap=0.5
;antiSMASH version (Currently only 5 is supported)
antismash_version=5



[Gene cluster formation]
;Method for gene cluster formation
;This is often referred to as operon formation. 
;However, we can't be sure that these are actually operons, only that they 
;lie on the same strand, and are relatively close to one another

gene_cluster_formation_method=island
simple_dist=750
island_dist=750
island_gene_dist=50
island_cog_cutoff=0.1
std_factor=1

;Store the operons so that they can be loaded again later
store_operons=true

;Amount of flanking genes to show and annotate
genecluster_extension=5


[Protein domain annotation]
;run_hmm --> always, never, auto
; always: Always run it and override previous results
; never: Never run it
; auto: Detect if the files are present or not
run_hmm=auto

[Gene cluster filters]
;filter out antiSMASH overlap or leave in those gene clusters in
filter_antismash=false
;Minimum number of genes
gene_cluster_min_length=3
;Maximum average COG score of the gene cluster
gene_cluster_max_cog=0.25
;Minimum nr of genes encoding biosynthetic proteins, in the core gene cluster or anywhere (core or flanking region)
gene_cluster_domains_min_biosyn=2
gene_cluster_domains_min_biosyn_all=0
;Minimum nr of genes encoding transporter proteins, in the core gene cluster or anywhere (core or flanking region)
gene_cluster_domains_min_transporter=0
gene_cluster_domains_min_transporter_all=1
;Minimum nr of genes encoding peptidase proteins, in the core gene cluster or anywhere (core or flanking region)
gene_cluster_domains_min_peptidase=0
gene_cluster_domains_min_peptidase_all=0
;Minimum number of genes encoding regulatory proteins, in the core gene cluster or anywhere (core or flanking region)
gene_cluster_domains_min_regulator=0
gene_cluster_domains_min_regulator_all=0
;Minimum number of genes encoding known RiPP proteins (e.g. YcaO, radical SAMs)
gene_cluster_domains_min_kripp=0
gene_cluster_domains_min_kripp_all=0

[clustering of BGCs]
;Cluster all BGCs found with any setting?
calc_networks=true
;Minimum group size
min_group_size=2

[precursor grouping]
;Whether or not to run the precursors allVall BLAST (will try to load previous results otherwise)
precursor_blast_run=true
;Cutoff for precursors to be grouped together
prec_min_ev=1
prec_min_bitscore=30
;Refine groups with mcl
precursor_mcl=true

[calculate_jaccard]
;Whether or not to group gene clusters with jaccard index of protein domains found in the core (will try to load previous results otherwise)
calculate_jaccard=true
;The cutoff to use
jaccard_cutoff=0.5
;Refine groups with mcl
jaccard_mcl=true

[Gene cluster scoring]
;An arbitrary is calculated as the sum of the scores given below multiplied by the respective amount of genes of that type
;That score is then multiplied by the number of precursors, to the power of the weight_precursor variable
;The score is finally divided by the COG score, to the power of the weight_COG variable
;The relative score of biosynthetic genes, transporters and peptidases, and known ripp enzymes (kripp)
score_biosyn=1
score_kripp=1
score_transporter=1
score_peptidase=1
score_regulator=1
weight_precursors=1
weight_COG=1

;An additional bonus can be given for the first gene of a specific type that is found
bonus_biosyn=0
bonus_transporter=5
bonus_peptidase=3
bonus_regulator=3



[old - no londer in use]
;The way the truecog similarity scores are fit. Either gm (GaussianModel) or sgm (SkewedGaussianModel) can be used
;sgm may take longer and give unexpected results if there can not be a good fit.
cutoff_mode=gm

; cog_seedmethod determines with which genome to start forming group. 'total' will try all genome pairs, while 'smart' selects only genomes
; not yet in groups
cog_seedmethod=smart



